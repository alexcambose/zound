{"version":3,"sources":["meteor://ðŸ’»app/imports/db/parties/collection.js","meteor://ðŸ’»app/imports/db/parties/methods.js","meteor://ðŸ’»app/imports/db/parties/publications.js","meteor://ðŸ’»app/imports/db/songs/collection.js","meteor://ðŸ’»app/imports/db/songs/methods.js","meteor://ðŸ’»app/imports/db/songs/publications.js","meteor://ðŸ’»app/imports/db/users/account-creation.js","meteor://ðŸ’»app/imports/db/users/collection.js","meteor://ðŸ’»app/imports/db/users/methods.js","meteor://ðŸ’»app/imports/db/users/publications.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/server/main.js"],"names":["Mongo","module","watch","require","v","SimpleSchema","default","Parties","Collection","PartiesSchema","title","type","String","max","min","description","genre","Array","Number","color","startDate","Date","endDate","password","user_id","joined_users","current_song_id","defaultValue","Object","created_at","autoValue","isInsert","isUpsert","$setOnInsert","unset","updated_at","isUpdate","optional","upvotes","downvotes","attachSchema","exportDefault","Songs","Meteor","methods","data","userId","date","validation","simpleSchema","validate","e","Error","message","insert","error","result","console","log","isDownvote","_id","party","findOne","key","keyInverse","find","update","$pull","$push","remove","party_id","$set","publish","u_id","SongsSchema","JSON","stringify","new_song_id","currentSongId","songs","fs","Accounts","onCreateUser","options","user","profile","firstName","lastName","image","settings","darkTheme","publicEmail","id","users","email","currentPassword","newPassword","confirmNewPassword","_checkPassword","setPassword","startup"],"mappings":";;;;;;;;AAAA,IAAIA,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,YAAJ;AAAiBJ,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACC,mBAAaD,CAAb;AAAe;;AAA3B,CAArC,EAAkE,CAAlE;AAGvF,MAAMG,UAAU,IAAIP,MAAMQ,UAAV,CAAqB,SAArB,CAAhB;AAEA,MAAMC,gBAAgB,IAAIJ,YAAJ,CAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,SAAO;AACHC,UAAMC,MADH;AAEHC,SAAK,GAFF;AAGHC,SAAK;AAHF,GAR4B;AAanCC,eAAa;AACTJ,UAAMC,MADG;AAETC,SAAK;AAFI,GAbsB;AAiBnCG,SAAO;AACHL,UAAMM;AADH,GAjB4B;AAoBnC,aAAW;AACPN,UAAMO;AADC,GApBwB;AAuBnCC,SAAO;AACHR,UAAMC;AADH,GAvB4B;AA0BnCQ,aAAW;AACPT,UAAMU;AADC,GA1BwB;AA6BnCC,WAAS;AACLX,UAAMU;AADD,GA7B0B;AAgCnCE,YAAU;AACNZ,UAAMC,MADA;AAENE,SAAK,CAFC;AAGND,SAAK;AAHC,GAhCyB;AAqCnCW,WAAS;AACLb,UAAMC;AADD,GArC0B;AAwCnCa,gBAAc;AACVd,UAAMM;AADI,GAxCqB;AA2CnCS,mBAAiB;AACbf,UAAMC,MADO;AAEbe,kBAAc;AAFD,GA3CkB;AA+CnC,oBAAkB;AACdhB,UAAMiB;AADQ,GA/CiB;AAkDnC,4BAA0B;AACtBjB,UAAMC;AADgB,GAlDS;AAqDnC,yBAAuB;AACnBD,UAAMU;AADa,GArDY;AAwDnCQ,cAAY;AACRlB,UAAMU,IADE;AAERS,eAAW,YAAW;AAClB,UAAI,KAAKC,QAAT,EAAmB;AACf,eAAO,IAAIV,IAAJ,EAAP;AACH,OAFD,MAEO,IAAI,KAAKW,QAAT,EAAmB;AACtB,eAAO;AAACC,wBAAc,IAAIZ,IAAJ;AAAf,SAAP;AACH,OAFM,MAEA;AACH,aAAKa,KAAL;AACH;AACJ;AAVO,GAxDuB;AAoEnCC,cAAY;AACRxB,UAAMU,IADE;AAERS,eAAW,YAAW;AAClB,UAAI,KAAKM,QAAT,EAAmB;AACf,eAAO,IAAIf,IAAJ,EAAP;AACH;AACJ,KANO;AAORgB,cAAU;AAPF,GApEuB;AA6EnCC,WAAS;AACL3B,UAAMM,KADD;AAELU,kBAAc;AAFT,GA7E0B;AAiFnC,eAAa;AACThB,UAAMC;AADG,GAjFsB;AAoFnC2B,aAAW;AACP5B,UAAMM;AADC,GApFwB;AAuFnC,iBAAe;AACXN,UAAMC;AADK;AAvFoB,CAAjB,CAAtB;AA2FAL,QAAQiC,YAAR,CAAqB/B,aAArB;AAhGAR,OAAOwC,aAAP,CAiGelC,OAjGf,E;;;;;;;;;;;ACAA,IAAIA,OAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACG,cAAQH,CAAR;AAAU;;AAAtB,CAArC,EAA6D,CAA7D;AAAgE,IAAIsC,KAAJ;AAAUzC,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACG,UAAQF,CAAR,EAAU;AAACsC,YAAMtC,CAAN;AAAQ;;AAApB,CAA5C,EAAkE,CAAlE;AAGtFuC,OAAOC,OAAP,CAAe;AACX,oBAAkB,CAAC;AAAElC,SAAF;AAASK,eAAT;AAAsBC,SAAtB;AAA6BI,aAA7B;AAAwCE,WAAxC;AAAiDC,YAAjD;AAA2DJ;AAA3D,GAAD,KAAwE;AACtF,UAAM0B,OAAO;AAAEnC,WAAF;AAASK,iBAAT;AAAsBC,WAAtB;AAA6BI,eAA7B;AAAwCE,aAAxC;AAAiDI,uBAAiB,EAAlE;AAAsEH,cAAtE;AAAgFE,oBAAc,CAAC;AAACD,iBAASmB,OAAOG,MAAP,EAAV;AAA2BC,cAAM,IAAI1B,IAAJ;AAAjC,OAAD,CAA9F;AAA4IG,eAASmB,OAAOG,MAAP,EAArJ;AAAsKjB,kBAAY,IAAIR,IAAJ,EAAlL;AAA4LiB,eAAS,EAArM;AAAyMC,iBAAW,EAApN;AAAwNpB;AAAxN,KAAb;;AACA,QAAI;AACA,YAAM6B,aAAazC,QAAQ0C,YAAR,GAAuBC,QAAvB,CAAgCL,IAAhC,CAAnB;AACH,KAFD,CAEC,OAAMM,CAAN,EAAS;AACN,YAAM,IAAIR,OAAOS,KAAX,CAAiB,kBAAjB,EAAqCD,EAAEE,OAAvC,CAAN;AACH;;AAED9C,YAAQ+C,MAAR,CAAeT,IAAf,EAAqB,CAACU,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAGD,KAAH,EAAUE,QAAQC,GAAR,CAAYH,KAAZ;AACVE,cAAQC,GAAR,CAAa,8BAA6BF,MAAO,GAAjD;AACH,KAHD;AAIH,GAbU;AAcX,wBAAsB,CAACG,aAAa,KAAd,EAAqBC,GAArB,KAA6B;AAC/C,UAAMC,QAAQtD,QAAQuD,OAAR,CAAgB;AAACF;AAAD,KAAhB,CAAd;AACA,UAAMG,MAAMJ,aAAa,WAAb,GAA2B,SAAvC;AACA,UAAMK,aAAaL,aAAa,SAAb,GAAyB,WAA5C;;AAEA,QAAGE,MAAME,GAAN,EAAWE,IAAX,CAAgBd,KAAKA,MAAMR,OAAOG,MAAP,EAA3B,CAAH,EAA+C;AAAE;AAC7CvC,cAAQ2D,MAAR,CAAe;AAACN;AAAD,OAAf,EAAsB;AAClBO,eAAO;AACH,WAACJ,GAAD,GAAOpB,OAAOG,MAAP;AADJ;AADW,OAAtB;AAKH,KAND,MAMO;AACHvC,cAAQ2D,MAAR,CAAe;AAACN;AAAD,OAAf,EAAsB;AAClBQ,eAAO;AACH,WAACL,GAAD,GAAOpB,OAAOG,MAAP;AADJ;AADW,OAAtB;AAKAvC,cAAQ2D,MAAR,CAAe;AAACN;AAAD,OAAf,EAAsB;AAClBO,eAAO;AACH,WAACH,UAAD,GAAcrB,OAAOG,MAAP;AADX;AADW,OAAtB;AAKH;AACJ,GArCU;AAsCX,wBAAsB,CAACc,GAAD,EAAMrC,WAAW,IAAjB,KAA0B;AAAE;AAC9C,UAAMsC,QAAQtD,QAAQuD,OAAR,CAAgB;AAACF;AAAD,KAAhB,CAAd;;AACA,QAAGC,MAAMpC,YAAN,CAAmBwC,IAAnB,CAAwBd,KAAKA,EAAE3B,OAAF,KAAcmB,OAAOG,MAAP,EAA3C,CAAH,EAAgE;AAC5D,UAAGH,OAAOG,MAAP,OAAoBe,MAAMrC,OAA7B,EAAsC,MAAM,IAAImB,OAAOS,KAAX,CAAiB,aAAjB,EAAgC,uCAAhC,CAAN;AACtC7C,cAAQ2D,MAAR,CAAe;AAACN;AAAD,OAAf,EAAsB;AAClBO,eAAO;AACH1C,wBAAc;AAAED,qBAAUmB,OAAOG,MAAP;AAAZ;AADX;AADW,OAAtB;AAKAW,cAAQC,GAAR,CAAa,SAAQf,OAAOG,MAAP,EAAgB,iBAAgBe,MAAMD,GAAI,GAA/D;AACH,KARD,MAQO,IAAGC,MAAMtC,QAAN,KAAmBA,QAAtB,EAAgC;AACnChB,cAAQ2D,MAAR,CAAe;AAACN;AAAD,OAAf,EAAsB;AAClBQ,eAAO;AACH3C,wBAAc;AAAED,qBAASmB,OAAOG,MAAP,EAAX;AAA4BC,kBAAM,IAAI1B,IAAJ;AAAlC;AADX;AADW,OAAtB;AAKAoC,cAAQC,GAAR,CAAa,SAAQf,OAAOG,MAAP,EAAgB,mBAAkBe,MAAMD,GAAI,GAAjE;AACH,KAPM,MAOA;AACH,YAAM,IAAIjB,OAAOS,KAAX,CAAiB,wBAAjB,EAA2C,iBAA3C,CAAN;AACH;AACJ,GA1DU;AA2DX,oBAAkBQ,OAAM;AACpB,UAAMC,QAAQtD,QAAQuD,OAAR,CAAgB;AAACF;AAAD,KAAhB,CAAd;;AACA,QAAGC,MAAMrC,OAAN,KAAkBmB,OAAOG,MAAP,EAArB,EAAsC;AAClCJ,YAAM2B,MAAN,CAAa;AAACC,kBAAUV;AAAX,OAAb;AACArD,cAAQ8D,MAAR,CAAe;AAACT;AAAD,OAAf;AACAH,cAAQC,GAAR,CAAa,SAAQf,OAAOG,MAAP,EAAgB,oBAAmBe,MAAMD,GAAI,GAAlE;AACH;AACJ,GAlEU;AAmEX,oBAAkB,CAACA,GAAD,EAAM;AAAElD,SAAF;AAASK,eAAT;AAAsBC,SAAtB;AAA6BI,aAA7B;AAAwCE,WAAxC;AAAiDH,SAAjD;AAAwDI;AAAxD,GAAN,KAA8E;AAC5FhB,YAAQ2D,MAAR,CAAe;AAACN;AAAD,KAAf,EAAsB;AAAEW,YAAM;AAC1B7D,aAD0B;AACnBK,mBADmB;AACNC,aADM;AACCI,iBADD;AACYE,eADZ;AACqBH,aADrB;AAC4BI;AAD5B;AAAR,KAAtB;AAGH;AAvEU,CAAf,E;;;;;;;;;;;ACHA,IAAIhB,OAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACG,cAAQH,CAAR;AAAU;;AAAtB,CAArC,EAA6D,CAA7D;AACZuC,OAAO6B,OAAP,CAAe,SAAf,EAA0B,MAAMjE,QAAQ0D,IAAR,CAAa,EAAb,CAAhC;AACAtB,OAAO6B,OAAP,CAAe,gBAAf,EAAiCC,QAAQlE,QAAQ0D,IAAR,CAAa,EAAb,CAAzC,E;;;;;;;;;;;ACFA,IAAIjE,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,YAAJ;AAAiBJ,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACC,mBAAaD,CAAb;AAAe;;AAA3B,CAArC,EAAkE,CAAlE;AAGvF,MAAMsC,QAAQ,IAAI1C,MAAMQ,UAAV,CAAqB,OAArB,CAAd;AAEA,MAAMkE,cAAc,IAAIrE,YAAJ,CAAiB;AACjCiE,YAAU;AACN3D,UAAMC;AADA,GADuB;AAIjCY,WAAS;AACLb,UAAMC;AADD,GAJwB;AAOjCiC,QAAM;AACFlC,UAAMC,MADJ,CACY;;AADZ,GAP2B;AAUjC0B,WAAS;AACL3B,UAAMM;AADD,GAVwB;AAajC,eAAa;AACTN,UAAMC;AADG,GAboB;AAgBjC2B,aAAW;AACP5B,UAAMM;AADC,GAhBsB;AAmBjC,iBAAe;AACXN,UAAMC;AADK,GAnBkB;AAsBjCiB,cAAY;AACRlB,UAAMU,IADE;AAERS,eAAW,YAAW;AAClB,UAAI,KAAKC,QAAT,EAAmB;AACf,eAAO,IAAIV,IAAJ,EAAP;AACH,OAFD,MAEO,IAAI,KAAKW,QAAT,EAAmB;AACtB,eAAO;AAACC,wBAAc,IAAIZ,IAAJ;AAAf,SAAP;AACH,OAFM,MAEA;AACH,aAAKa,KAAL;AACH;AACJ;AAVO,GAtBqB;AAkCjCC,cAAY;AACRxB,UAAMU,IADE;AAERS,eAAW,YAAW;AAClB,UAAI,KAAKM,QAAT,EAAmB;AACf,eAAO,IAAIf,IAAJ,EAAP;AACH;AACJ,KANO;AAORgB,cAAU;AAPF;AAlCqB,CAAjB,CAApB;AA4CAK,MAAMF,YAAN,CAAmBkC,WAAnB;AAjDAzE,OAAOwC,aAAP,CAkDeC,KAlDf,E;;;;;;;;;;;ACAA,IAAIA,KAAJ;AAAUzC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACsC,YAAMtC,CAAN;AAAQ;;AAApB,CAArC,EAA2D,CAA3D;AAA8D,IAAIG,OAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACG,UAAQF,CAAR,EAAU;AAACG,cAAQH,CAAR;AAAU;;AAAtB,CAA9C,EAAsE,CAAtE;AAGpFuC,OAAOC,OAAP,CAAe;AACX,eAAa,CAAC0B,QAAD,EAAWzB,IAAX,KAAoB;AAC7BH,UAAMY,MAAN,CAAa;AACT9B,eAASmB,OAAOG,MAAP,EADA;AAETD,YAAM8B,KAAKC,SAAL,CAAe/B,IAAf,CAFG;AAGTyB,cAHS;AAIThC,eAAS,EAJA;AAKTC,iBAAW;AALF,KAAb;AAOH,GATU;AAUX,sBAAoB,CAAC+B,QAAD,EAAWO,WAAX,KAA2B;AAC3C,UAAMC,gBAAgBvE,QAAQuD,OAAR,CAAgB;AAACF,WAAKU;AAAN,KAAhB,EAAiC5C,eAAvD;AACA,QAAGoD,aAAH,EAAkBpC,MAAM2B,MAAN,CAAa;AAACT,WAAKkB;AAAN,KAAb;AAElBvE,YAAQ2D,MAAR,CAAe;AAACN,WAAKU;AAAN,KAAf,EAAgC;AAACC,YAAM;AAAC7C,yBAAiBmD;AAAlB;AAAP,KAAhC;AACApB,YAAQC,GAAR,CAAa,gBAAemB,WAAY,aAAYP,QAAS,kBAAiBQ,aAAc,EAA5F;AACH,GAhBU;AAiBX,kBAAgBlB,OAAO;AACnB,QAAGrD,QAAQuD,OAAR,CAAgB;AAACpC,uBAAiBkC;AAAlB,KAAhB,CAAH,EAA4C,MAAM,IAAIjB,OAAOS,KAAX,CAAiB,QAAjB,EAA2B,sCAA3B,CAAN;AAC5CV,UAAM2B,MAAN,CAAa;AAACT;AAAD,KAAb;AACAH,YAAQC,GAAR,CAAa,QAAOE,GAAI,UAAxB;AACH,GArBU;AAsBX,6BAA2BA,OAAO;AAC9B,UAAMC,QAAQtD,QAAQuD,OAAR,CAAgB;AAACpC,uBAAiBkC;AAAlB,KAAhB,CAAd;;AACA,QAAGC,KAAH,EAAU;AACNnB,YAAM2B,MAAN,CAAa;AAACT;AAAD,OAAb;AACArD,cAAQ2D,MAAR,CAAe;AAACxC,yBAAiBkC;AAAlB,OAAf,EAAuC;AAACW,cAAM;AAAC7C,2BAAiB;AAAlB;AAAP,OAAvC;AACA+B,cAAQC,GAAR,CAAa,QAAOE,GAAI,sCAAqCC,MAAMD,GAAI,EAAvE;AACH,KAJD,MAIO;AACH,YAAM,IAAIjB,OAAOS,KAAX,CAAiB,QAAjB,EAA2B,uDAA3B,CAAN;AACH;AAEJ,GAhCU;AAiCX,sBAAoB,CAACO,aAAa,KAAd,EAAqBC,GAArB,KAA6B;AAC7C,UAAMmB,QAAQrC,MAAMoB,OAAN,CAAc;AAACF;AAAD,KAAd,CAAd;AACA,UAAMG,MAAMJ,aAAa,WAAb,GAA2B,SAAvC;AACA,UAAMK,aAAaL,aAAa,SAAb,GAAyB,WAA5C;;AAEA,QAAGoB,MAAMhB,GAAN,EAAWE,IAAX,CAAgBd,KAAKA,MAAMR,OAAOG,MAAP,EAA3B,CAAH,EAA+C;AAAE;AAC7CJ,YAAMwB,MAAN,CAAa;AAACN;AAAD,OAAb,EAAoB;AAChBO,eAAO;AACH,WAACJ,GAAD,GAAOpB,OAAOG,MAAP;AADJ;AADS,OAApB;AAKH,KAND,MAMO;AACHJ,YAAMwB,MAAN,CAAa;AAACN;AAAD,OAAb,EAAoB;AAChBQ,eAAO;AACH,WAACL,GAAD,GAAOpB,OAAOG,MAAP;AADJ;AADS,OAApB;AAKAJ,YAAMwB,MAAN,CAAa;AAACN;AAAD,OAAb,EAAoB;AAChBO,eAAO;AACH,WAACH,UAAD,GAAcrB,OAAOG,MAAP;AADX;AADS,OAApB;AAKH;AACJ;AAxDU,CAAf,E;;;;;;;;;;;ACHA,IAAIJ,KAAJ;AAAUzC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACG,UAAQF,CAAR,EAAU;AAACsC,YAAMtC,CAAN;AAAQ;;AAApB,CAArC,EAA2D,CAA3D;AAEVuC,OAAO6B,OAAP,CAAe,OAAf,EAAwBF,YAAY5B,MAAMuB,IAAN,CAAW;AAAEK;AAAF,CAAX,CAApC,E;;;;;;;;;;;ACFA,IAAIU,EAAJ;AAAO/E,OAAOC,KAAP,CAAaC,QAAQ,IAAR,CAAb,EAA2B;AAACG,UAAQF,CAAR,EAAU;AAAC4E,SAAG5E,CAAH;AAAK;;AAAjB,CAA3B,EAA8C,CAA9C;AAEP6E,SAASC,YAAT,CAAsB,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACrC,QAAM;AAAEC,aAAS;AAAEC,eAAF;AAAaC;AAAb;AAAX,MAAuCJ,OAA7C;AACAC,OAAKC,OAAL,GAAe,EAAf;AACAD,OAAKC,OAAL,CAAaC,SAAb,GAAyBA,SAAzB;AACAF,OAAKC,OAAL,CAAaE,QAAb,GAAwBA,QAAxB;AACAH,OAAKC,OAAL,CAAaG,KAAb,GAAqB,wBAArB;AACAJ,OAAKC,OAAL,CAAaI,QAAb,GAAwB,EAAxB;AACAL,OAAKC,OAAL,CAAaI,QAAb,CAAsBC,SAAtB,GAAkC,KAAlC;AACAN,OAAKC,OAAL,CAAaI,QAAb,CAAsBE,WAAtB,GAAoC,IAApC;AACA,SAAOP,IAAP;AACH,CAVD,E;;;;;;;;;;;ACFA,IAAIpF,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAAVH,OAAOwC,aAAP,CAEe,IAAIzC,MAAMQ,UAAV,CAAqB,MAArB,CAFf,E;;;;;;;;;;;ACAA,IAAID,OAAJ;AAAYN,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACG,UAAQF,CAAR,EAAU;AAACG,cAAQH,CAAR;AAAU;;AAAtB,CAA9C,EAAsE,CAAtE;AAAyE,IAAIsC,KAAJ;AAAUzC,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACG,UAAQF,CAAR,EAAU;AAACsC,YAAMtC,CAAN;AAAQ;;AAApB,CAA5C,EAAkE,CAAlE;AAG/FuC,OAAOC,OAAP,CAAe;AACX,cAAYgD,MAAMjD,OAAOkD,KAAP,CAAa/B,OAAb,CAAqB;AAACF,SAAKgC;AAAN,GAArB,CADP;AAEX,wBAAsB,CAAC;AAAEN,aAAF;AAAaC,YAAb;AAAuBO,SAAvB;AAA8BC,mBAA9B;AAA+CC,eAA/C;AAA4DC;AAA5D,GAAD,KAAsF;AACxG,QAAGF,eAAH,EAAoB;AAChB,UAAGC,gBAAgBC,kBAAnB,EAAuC,MAAM,IAAItD,OAAOS,KAAX,CAAiB,UAAjB,EAA6B,yBAA7B,CAAN;AACvC,UAAG6B,SAASiB,cAAT,CAAwBvD,OAAOyC,IAAP,EAAxB,EAAuCW,eAAvC,CAAH,EACId,SAASkB,WAAT,CAAqBxD,OAAOG,MAAP,EAArB,EAAsCkD,WAAtC;AAEP;;AACDrD,WAAOkD,KAAP,CAAa3B,MAAb,CAAoBvB,OAAOG,MAAP,EAApB,EAAqC;AAACyB,YAAM;AACxC,4BAAoBuB,KADoB;AAExC,6BAAqBR,SAFmB;AAGxC,4BAAoBC;AAHoB;AAAP,KAArC;AAKH,GAdU;AAeX,yBAAuB,CAAC;AAAEG,aAAF;AAAaC;AAAb,GAAD,KAAgC;AACnDhD,WAAOkD,KAAP,CAAa3B,MAAb,CAAoBvB,OAAOG,MAAP,EAApB,EAAqC;AAACyB,YAAM;AACxC,sCAA8BmB,SADU;AAExC,wCAAgCC;AAFQ;AAAP,KAArC;AAIH,GApBU;AAqBX,wBAAsB,MAAM;AACxBpF,YAAQ8D,MAAR,CAAe;AAAC7C,eAASmB,OAAOG,MAAP;AAAV,KAAf;AACAvC,YAAQ2D,MAAR,CAAe,EAAf,EAAmB;AACfC,aAAO;AACH7B,iBAASK,OAAOG,MAAP,EADN;AAEHP,mBAAWI,OAAOG,MAAP,EAFR;AAGHrB,sBAAc;AAAED,mBAAUmB,OAAOG,MAAP;AAAZ;AAHX;AADQ,KAAnB;AAOAJ,UAAM2B,MAAN,CAAa;AAAC7C,eAASmB,OAAOG,MAAP;AAAV,KAAb;AACAJ,UAAMwB,MAAN,CAAa,EAAb,EAAiB;AACbC,aAAO;AACH7B,iBAASK,OAAOG,MAAP,EADN;AAEHP,mBAAWI,OAAOG,MAAP;AAFR;AADM,KAAjB;AAMAH,WAAOkD,KAAP,CAAaxB,MAAb,CAAoB;AAACT,WAAKjB,OAAOG,MAAP;AAAN,KAApB;AACH;AAtCU,CAAf,E;;;;;;;;;;;ACHAH,OAAO6B,OAAP,CAAe,OAAf,EAAwB,MAAM7B,OAAOkD,KAAP,CAAa5B,IAAb,CAAkB,EAAlB,CAA9B;AACAtB,OAAO6B,OAAP,CAAe,MAAf,EAAuBZ,OAAOjB,OAAOkD,KAAP,CAAa5B,IAAb,CAAkB;AAACL;AAAD,CAAlB,CAA9B,E;;;;;;;;;;;ACDA3D,OAAOC,KAAP,CAAaC,QAAQ,8BAAR,CAAb;AAAsDF,OAAOC,KAAP,CAAaC,QAAQ,gCAAR,CAAb;AAAwDF,OAAOC,KAAP,CAAaC,QAAQ,2BAAR,CAAb;AAAmDF,OAAOC,KAAP,CAAaC,QAAQ,oCAAR,CAAb;AAA4DF,OAAOC,KAAP,CAAaC,QAAQ,gCAAR,CAAb;AAAwDF,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb;AAAqDF,OAAOC,KAAP,CAAaC,QAAQ,kCAAR,CAAb;AAA0DF,OAAOC,KAAP,CAAaC,QAAQ,8BAAR,CAAb;AAAsDF,OAAOC,KAAP,CAAaC,QAAQ,2BAAR,CAAb;AAAmDF,OAAOC,KAAP,CAAaC,QAAQ,gCAAR,CAAb,E;;;;;;;;;;;ACA7e,IAAIwC,MAAJ;AAAW1C,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACwC,SAAOvC,CAAP,EAAS;AAACuC,aAAOvC,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+DH,OAAOC,KAAP,CAAaC,QAAQ,0BAAR,CAAb;AAG1EwC,OAAOyD,OAAP,CAAe,MAAM,CACnB;AACD,CAFD,E","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Parties = new Mongo.Collection('parties');\n\nconst PartiesSchema = new SimpleSchema({\n    // url: {\n    //     type: String,\n    //     min: 2,\n    //     max: 20,\n    //     index: true,\n    //     unique: true\n    // },\n    title: {\n        type: String,\n        max: 200,\n        min: 3,\n    },\n    description: {\n        type: String,\n        max: 2000,\n    },\n    genre: {\n        type: Array,\n    },\n    'genre.$': {\n        type: Number,\n    },\n    color: {\n        type: String,\n    },\n    startDate: {\n        type: Date,\n    },\n    endDate: {\n        type: Date,\n    },\n    password: {\n        type: String,\n        min: 3,\n        max: 20,\n    },\n    user_id: {\n        type: String,\n    },\n    joined_users: {\n        type: Array,\n    },\n    current_song_id: {\n        type: String,\n        defaultValue: '',\n    },\n    'joined_users.$': {\n        type: Object,\n    },\n    'joined_users.$.user_id': {\n        type: String,\n    },\n    'joined_users.$.date': {\n        type: Date,\n    },\n    created_at: {\n        type: Date,\n        autoValue: function() {\n            if (this.isInsert) {\n                return new Date();\n            } else if (this.isUpsert) {\n                return {$setOnInsert: new Date()};\n            } else {\n                this.unset();\n            }\n        },\n    },\n    updated_at: {\n        type: Date,\n        autoValue: function() {\n            if (this.isUpdate) {\n                return new Date();\n            }\n        },\n        optional: true\n    },\n    upvotes: {\n        type: Array,\n        defaultValue: []\n    },\n    'upvotes.$': {\n        type: String,\n    },\n    downvotes: {\n        type: Array,\n    },\n    'downvotes.$': {\n        type: String,\n    }\n});\nParties.attachSchema(PartiesSchema);\nexport default Parties;","import Parties from './collection';\nimport Songs from '../songs/collection';\n\nMeteor.methods({\n    'parties.insert': ({ title, description, genre, startDate, endDate, password, color }) => {\n        const data = { title, description, genre, startDate, endDate, current_song_id: '', password, joined_users: [{user_id: Meteor.userId(), date: new Date}], user_id: Meteor.userId(), created_at: new Date, upvotes: [], downvotes: [], color };\n        try {\n            const validation = Parties.simpleSchema().validate(data);\n        }catch(e) {\n            throw new Meteor.Error('validation-error', e.message);\n        }\n\n        Parties.insert(data, (error, result) => {\n            if(error) console.log(error);\n            console.log(`New party created with id \"${result}\"`);\n        })\n    },\n    'parties.toggleVote': (isDownvote = false, _id) => {\n        const party = Parties.findOne({_id});\n        const key = isDownvote ? 'downvotes' : 'upvotes';\n        const keyInverse = isDownvote ? 'upvotes' : 'downvotes';\n\n        if(party[key].find(e => e === Meteor.userId())){ // remove from up/down votes\n            Parties.update({_id}, {\n                $pull: {\n                    [key]: Meteor.userId(),\n                }\n            });\n        } else {\n            Parties.update({_id}, {\n                $push: {\n                    [key]: Meteor.userId(),\n                }\n            });\n            Parties.update({_id}, {\n                $pull: {\n                    [keyInverse]: Meteor.userId(),\n                }\n            });\n        }\n    },\n    'parties.toggleJoin': (_id, password = null) => { //password is optional, only used at joining\n        const party = Parties.findOne({_id});\n        if(party.joined_users.find(e => e.user_id === Meteor.userId())) {\n            if(Meteor.userId() === party.user_id) throw new Meteor.Error('party-leave', 'Cannot leave party if you created it!');\n            Parties.update({_id}, {\n                $pull: {\n                    joined_users: { user_id : Meteor.userId()},\n                }\n            });\n            console.log(`User '${Meteor.userId()}' left party '${party._id}'`);\n        } else if(party.password === password) {\n            Parties.update({_id}, {\n                $push: {\n                    joined_users: { user_id: Meteor.userId(), date: new Date},\n                }\n            });\n            console.log(`User '${Meteor.userId()}' joined party '${party._id}'`);\n        } else {\n            throw new Meteor.Error('invalid-party-password', 'Wrong password!');\n        }\n    },\n    'parties.remove': _id =>{\n        const party = Parties.findOne({_id});\n        if(party.user_id === Meteor.userId()) {\n            Songs.remove({party_id: _id});\n            Parties.remove({_id});\n            console.log(`User '${Meteor.userId()}' deleted party '${party._id}'`);\n        }\n    },\n    'parties.update': (_id, { title, description, genre, startDate, endDate, color, password, }) => {\n        Parties.update({_id}, { $set: {\n            title, description, genre, startDate, endDate, color, password,\n        }});\n    }\n});","import Parties from './collection';\nMeteor.publish('parties', () => Parties.find({}));\nMeteor.publish('parties.joined', u_id => Parties.find({}));","import { Mongo } from 'meteor/mongo';\nimport SimpleSchema from 'simpl-schema';\n\nconst Songs = new Mongo.Collection('songs');\n\nconst SongsSchema = new SimpleSchema({\n    party_id: {\n        type: String,\n    },\n    user_id: {\n        type: String,\n    },\n    data: {\n        type: String, //JSON string\n    },\n    upvotes: {\n        type: Array,\n    },\n    'upvotes.$': {\n        type: String,\n    },\n    downvotes: {\n        type: Array,\n    },\n    'downvotes.$': {\n        type: String,\n    },\n    created_at: {\n        type: Date,\n        autoValue: function() {\n            if (this.isInsert) {\n                return new Date();\n            } else if (this.isUpsert) {\n                return {$setOnInsert: new Date()};\n            } else {\n                this.unset();\n            }\n        },\n    },\n    updated_at: {\n        type: Date,\n        autoValue: function() {\n            if (this.isUpdate) {\n                return new Date();\n            }\n        },\n        optional: true\n    },\n});\nSongs.attachSchema(SongsSchema);\nexport default Songs;","import Songs from './collection';\nimport Parties from '../parties/collection';\n\nMeteor.methods({\n    'songs.add': (party_id, data) => {\n        Songs.insert({\n            user_id: Meteor.userId(),\n            data: JSON.stringify(data),\n            party_id,\n            upvotes: [],\n            downvotes: [],\n        })\n    },\n    'songs.setCurrent': (party_id, new_song_id) => {\n        const currentSongId = Parties.findOne({_id: party_id}).current_song_id;\n        if(currentSongId) Songs.remove({_id: currentSongId});\n\n        Parties.update({_id: party_id}, {$set: {current_song_id: new_song_id}});\n        console.log(`Playing song ${new_song_id} at party ${party_id}, removed song ${currentSongId}`)\n    },\n    'songs.remove': _id => {\n        if(Parties.findOne({current_song_id: _id})) throw new Meteor.Error('remove', 'Cannot remove a song that is playing');\n        Songs.remove({_id});\n        console.log(`Song ${_id} removed`);\n    },\n    'songs.removeFromPlaying': _id => {\n        const party = Parties.findOne({current_song_id: _id});\n        if(party) {\n            Songs.remove({_id});\n            Parties.update({current_song_id: _id}, {$set: {current_song_id: 0}});\n            console.log(`Song ${_id} removed, playing no song at party ${party._id}`);\n        } else {\n            throw new Meteor.Error('remove', 'Cannot remove a song from playing that is not playing');\n        }\n\n    },\n    'songs.toggleVote': (isDownvote = false, _id) => {\n        const songs = Songs.findOne({_id});\n        const key = isDownvote ? 'downvotes' : 'upvotes';\n        const keyInverse = isDownvote ? 'upvotes' : 'downvotes';\n\n        if(songs[key].find(e => e === Meteor.userId())){ // remove from up/down votes\n            Songs.update({_id}, {\n                $pull: {\n                    [key]: Meteor.userId(),\n                }\n            });\n        } else {\n            Songs.update({_id}, {\n                $push: {\n                    [key]: Meteor.userId(),\n                }\n            });\n            Songs.update({_id}, {\n                $pull: {\n                    [keyInverse]: Meteor.userId(),\n                }\n            });\n        }\n    },\n});","import Songs from './collection';\n\nMeteor.publish('songs', party_id => Songs.find({ party_id }));","import fs from 'fs';\n\nAccounts.onCreateUser((options, user) => {\n    const { profile: { firstName, lastName } } = options;\n    user.profile = {};\n    user.profile.firstName = firstName;\n    user.profile.lastName = lastName;\n    user.profile.image = 'default-user-image.png';\n    user.profile.settings = {};\n    user.profile.settings.darkTheme = false;\n    user.profile.settings.publicEmail = true;\n    return user;\n});","import { Mongo } from 'meteor/mongo';\n\nexport default new Mongo.Collection('user');","import Parties from '../parties/collection';\nimport Songs from '../songs/collection';\n\nMeteor.methods({\n    'user.get': id => Meteor.users.findOne({_id: id}),\n    'user.updateAccount': ({ firstName, lastName, email, currentPassword, newPassword, confirmNewPassword }) => {\n        if(currentPassword) {\n            if(newPassword !== confirmNewPassword) throw new Meteor.Error('password', 'Passwords don\\'t match!');\n            if(Accounts._checkPassword(Meteor.user(), currentPassword))\n                Accounts.setPassword(Meteor.userId(), newPassword);\n\n        }\n        Meteor.users.update(Meteor.userId(), {$set: {\n            'emails.0.address': email,\n            'profile.firstName': firstName,\n            'profile.lastName': lastName\n        }});\n    },\n    'user.updateSettings': ({ darkTheme, publicEmail }) => {\n        Meteor.users.update(Meteor.userId(), {$set: {\n            'profile.settings.darkTheme': darkTheme,\n            'profile.settings.publicEmail': publicEmail\n        }});\n    },\n    'user.removeAccount': () => {\n        Parties.remove({user_id: Meteor.userId()});\n        Parties.update({}, {\n            $pull: {\n                upvotes: Meteor.userId(),\n                downvotes: Meteor.userId(),\n                joined_users: { user_id : Meteor.userId() },\n            }\n        });\n        Songs.remove({user_id: Meteor.userId()});\n        Songs.update({}, {\n            $pull: {\n                upvotes: Meteor.userId(),\n                downvotes: Meteor.userId(),\n            }\n        });\n        Meteor.users.remove({_id: Meteor.userId()});\n    },\n});\n","Meteor.publish('users', () => Meteor.users.find({}));\nMeteor.publish('user', _id => Meteor.users.find({_id}));","import '/imports/db/users/collection';\nimport '/imports/db/users/publications';\nimport '/imports/db/users/methods';\nimport '/imports/db/users/account-creation';\nimport '/imports/db/parties/collection';\nimport '/imports/db/parties/methods';\nimport '/imports/db/parties/publications';\nimport '/imports/db/songs/collection';\nimport '/imports/db/songs/methods';\nimport '/imports/db/songs/publications';\n","import { Meteor } from 'meteor/meteor';\nimport '/imports/startup/server/';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}