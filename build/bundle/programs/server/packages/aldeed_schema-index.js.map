{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:schema-index/server.js","meteor://ðŸ’»app/packages/aldeed:schema-index/common.js"],"names":["Collection2","module","watch","require","default","v","Meteor","on","collection","ss","ensureIndex","index","name","unique","sparse","startup","_collection","_ensureIndex","background","dropIndex","indexName","_dropIndex","err","propName","version","schema","Object","keys","forEach","fieldName","definition","indexValue","idxFieldName","replace","optional","SimpleSchema","extendOptions","messageBox","messages","en","notUnique"],"mappings":"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","file":"/packages/aldeed_schema-index.js","sourcesContent":["import Collection2 from 'meteor/aldeed:collection2';\nimport { Meteor } from 'meteor/meteor';\n\nimport './common';\n\nCollection2.on('schema.attached', (collection, ss) => {\n  function ensureIndex(index, name, unique, sparse) {\n    Meteor.startup(() => {\n      collection._collection._ensureIndex(index, {\n        background: true,\n        name,\n        unique,\n        sparse,\n      });\n    });\n  }\n\n  function dropIndex(indexName) {\n    Meteor.startup(() => {\n      try {\n        collection._collection._dropIndex(indexName);\n      } catch (err) {\n        // no index with that name, which is what we want\n      }\n    });\n  }\n\n  const propName = ss.version === 2 ? 'mergedSchema' : 'schema';\n\n  // Loop over fields definitions and ensure collection indexes (server side only)\n  const schema = ss[propName]();\n  Object.keys(schema).forEach((fieldName) => {\n    const definition = schema[fieldName];\n    if ('index' in definition || definition.unique === true) {\n      const index = {};\n      // If they specified `unique: true` but not `index`,\n      // we assume `index: 1` to set up the unique index in mongo\n      let indexValue;\n      if ('index' in definition) {\n        indexValue = definition.index;\n        if (indexValue === true) indexValue = 1;\n      } else {\n        indexValue = 1;\n      }\n\n      const indexName = `c2_${fieldName}`;\n      // In the index object, we want object array keys without the \".$\" piece\n      const idxFieldName = fieldName.replace(/\\.\\$\\./g, '.');\n      index[idxFieldName] = indexValue;\n      const unique = !!definition.unique && (indexValue === 1 || indexValue === -1);\n      let sparse = definition.sparse || false;\n\n      // If unique and optional, force sparse to prevent errors\n      if (!sparse && unique && definition.optional) sparse = true;\n\n      if (indexValue === false) {\n        dropIndex(indexName);\n      } else {\n        ensureIndex(index, indexName, unique, sparse);\n      }\n    }\n  });\n});\n","// collection2 checks to make sure that simpl-schema package is added\nimport SimpleSchema from 'simpl-schema';\nimport Collection2 from 'meteor/aldeed:collection2';\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  'index', // one of Number, String, Boolean\n  'unique', // Boolean\n  'sparse', // Boolean\n]);\n\nCollection2.on('schema.attached', (collection, ss) => {\n  // Define validation error messages\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === 'function') {\n    ss.messageBox.messages({\n      en: {\n        notUnique: '{{label}} must be unique',\n      },\n    });\n  }\n});\n"]}